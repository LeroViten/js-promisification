{"version":3,"sources":["js/app.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","consoleLogger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","reject","logSuccess","logError","warn","amount","catch"],"mappings":";;;AACA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAAgBC,GAAQC,QAAQC,sBAAsBF,OAG5DN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAAQC,IAIjBA,EAHqBW,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAM7DC,EAASC,GAAgBZ,QAAQa,MAAMD,GAG7CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAGnC,MAAMG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,EAAGC,GAAAA,KAClB,IAAI1B,QAAQ,CAACC,EAAS0B,KACrB7B,MAAAA,EAAQqB,EAA0B,IAAK,KAE7CjB,WAAW,KACUoB,KAAKE,SAAW,IAEjCvB,EAAQ,CAAEyB,GAAAA,EAAI5B,MAAAA,IAEhB6B,EAAO,CAAED,GAAAA,KACR5B,KAID8B,EAAa,EAAGF,GAAAA,EAAI5B,MAAAA,MACxBO,QAAQC,sBAAsBoB,kBAAmB5B,MAAW,mCAGxD+B,EAAW,EAAGH,GAAAA,MAClBrB,QAAQyB,wCAC6BJ,6BACnC,iCAKJD,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH;;ACzEhE,aADA,QAAA,oBACA,QAAA","file":"src.7e0def6d.js","sourceRoot":"../src","sourcesContent":["// ================== TASK 1 =====================\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst consoleLogger = time => console.log(`Resolved after ${time}ms`);\n\n// check for working\ndelay(2000).then(consoleLogger); // Resolved after 2000ms\ndelay(1000).then(consoleLogger); // Resolved after 1000ms\ndelay(1500).then(consoleLogger); // Resolved after 1500ms\n\n// =================== TASK 2 ====================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// Check for working:\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n// =================== TASK 3 ====================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id }) => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        resolve({ id, delay });\n      }\n      reject({ id });\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`%c Transaction ${id} processed in ${delay}ms`, 'color: green; font-size: 14px;');\n};\n\nconst logError = ({ id }) => {\n  console.warn(\n    `%c Error processing transaction ${id}. Please try again later.`,\n    'color: red; font-size: 14px;',\n  );\n};\n\n// Check for working:\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/app';\n"]}