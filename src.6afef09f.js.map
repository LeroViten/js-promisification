{"version":3,"sources":["js/app.js","index.js"],"names":["delay","ms","consoleLogger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","logger","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AACA,MAAMA,EAAQC,MAIRC,EAAgBC,GAAQC,QAAQC,sBAAsBF,aAG5DH,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,EAAUC,KAK3CA,EAJqBF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAM3DC,EAASC,GAAgBb,QAAQc,MAAMD,GAG7CP,EAAgBH,EAAO,QAASS,GAChCN,EAAgBH,EAAO,MAAOS,GAG9BN,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAGnC,MAAMG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC5B,MAAAA,EAAQmB,EAA0B,IAAK,KAE7CU,WAAW,KACUP,KAAKE,SAAW,GAGjCG,EAAUD,EAAYI,GAAI9B,GAE1B4B,EAAQF,EAAYI,KAErB9B,IAGC+B,EAAa,CAACD,EAAI3B,KACtBC,QAAQC,mBAAmByB,kBAAmB3B,QAG1C6B,EAAWF,IACf1B,QAAQ6B,qCAAqCH,+BAI/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,IAAMH,EAAYC,GACpDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GAErDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAM5B,KAAKyB,GAAYI,MAAMH,GAE/DP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH;;AC5EhE,aADA,QAAA,oBACA,QAAA","file":"src.6afef09f.js","sourceRoot":"../src","sourcesContent":["// ================== TASK 1 =====================\nconst delay = ms => {\n  // Твой код\n};\n\nconst consoleLogger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(consoleLogger); // Resolved after 2000ms\ndelay(1000).then(consoleLogger); // Resolved after 1000ms\ndelay(1500).then(consoleLogger); // Resolved after 1500ms\n\n// =================== TASK 2 ====================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// Сейчас работает так:\ntoggleUserState(users, 'Mango', logger);\ntoggleUserState(users, 'Lux', logger);\n\n// Должно работать так:\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n// =================== TASK 3 ====================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Работает так:\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// Должно работать так:\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/app';\n"]}